#!/bin/bash

# Fun√ß√£o para criar inst√¢ncia EC2 com sele√ß√£o interativa de VPC e subnet
create_ec2_instance() {
    echo "=== Cria√ß√£o de Inst√¢ncia EC2 ==="
    echo
    
    # Verificar se AWS CLI est√° configurado
    if ! aws sts get-caller-identity &>/dev/null; then
        echo "Erro: AWS CLI n√£o est√° configurado. Execute 'aws configure' primeiro."
        return 1
    fi
    
    # Definir regi√£o (pode ser alterada conforme necess√°rio)
    REGION=${AWS_DEFAULT_REGION:-us-east-1}
    echo "Regi√£o selecionada: $REGION"
    echo
    
    # 1. Listar VPCs dispon√≠veis
    echo "üìã Listando VPCs dispon√≠veis..."
    echo
    
    # Obter VPCs e format√°-las
    VPC_DATA=$(aws ec2 describe-vpcs \
        --region "$REGION" \
        --query 'Vpcs[*].[VpcId,CidrBlock,Tags[?Key==`Name`].Value|[0],IsDefault]' \
        --output text)
    
    if [ -z "$VPC_DATA" ]; then
        echo "Nenhuma VPC encontrada na regi√£o $REGION"
        return 1
    fi
    
    # Criar array para armazenar VPCs
    declare -a VPC_IDS
    declare -a VPC_INFO
    counter=1
    
    echo "VPCs dispon√≠veis:"
    echo "=================="
    
    while IFS=$'\t' read -r vpc_id cidr_block name is_default; do
        # Se name estiver vazio, usar "Sem nome"
        if [ "$name" = "None" ] || [ -z "$name" ]; then
            name="Sem nome"
        fi
        
        # Marcar VPC padr√£o
        default_marker=""
        if [ "$is_default" = "True" ]; then
            default_marker=" (Padr√£o)"
        fi
        
        VPC_IDS[$counter]="$vpc_id"
        VPC_INFO[$counter]="$vpc_id - $cidr_block - $name$default_marker"
        
        echo "$counter) $vpc_id - $cidr_block - $name$default_marker"
        ((counter++))
    done <<< "$VPC_DATA"
    
    echo
    
    # Solicitar sele√ß√£o da VPC
    while true; do
        read -p "Selecione o n√∫mero da VPC (1-$((counter-1))): " vpc_choice
        
        if [[ "$vpc_choice" =~ ^[0-9]+$ ]] && [ "$vpc_choice" -ge 1 ] && [ "$vpc_choice" -lt "$counter" ]; then
            SELECTED_VPC="${VPC_IDS[$vpc_choice]}"
            echo "VPC selecionada: ${VPC_INFO[$vpc_choice]}"
            break
        else
            echo "Sele√ß√£o inv√°lida. Digite um n√∫mero entre 1 e $((counter-1))."
        fi
    done
    
    echo
    
    # 2. Listar subnets da VPC selecionada
    echo "üìã Listando subnets da VPC $SELECTED_VPC..."
    echo
    
    SUBNET_DATA=$(aws ec2 describe-subnets \
        --region "$REGION" \
        --filters "Name=vpc-id,Values=$SELECTED_VPC" \
        --query 'Subnets[*].[SubnetId,CidrBlock,AvailabilityZone,Tags[?Key==`Name`].Value|[0],MapPublicIpOnLaunch]' \
        --output text)
    
    if [ -z "$SUBNET_DATA" ]; then
        echo "Nenhuma subnet encontrada na VPC $SELECTED_VPC"
        return 1
    fi
    
    # Criar array para armazenar subnets
    declare -a SUBNET_IDS
    declare -a SUBNET_INFO
    counter=1
    
    echo "Subnets dispon√≠veis:"
    echo "===================="
    
    while IFS=$'\t' read -r subnet_id cidr_block az name public_ip; do
        # Se name estiver vazio, usar "Sem nome"
        if [ "$name" = "None" ] || [ -z "$name" ]; then
            name="Sem nome"
        fi
        
        # Indicar se √© p√∫blica ou privada
        subnet_type="Privada"
        if [ "$public_ip" = "True" ]; then
            subnet_type="P√∫blica"
        fi
        
        SUBNET_IDS[$counter]="$subnet_id"
        SUBNET_INFO[$counter]="$subnet_id - $cidr_block - $az - $name ($subnet_type)"
        
        echo "$counter) $subnet_id - $cidr_block - $az - $name ($subnet_type)"
        ((counter++))
    done <<< "$SUBNET_DATA"
    
    echo
    
    # Solicitar sele√ß√£o da subnet
    while true; do
        read -p "Selecione o n√∫mero da subnet (1-$((counter-1))): " subnet_choice
        
        if [[ "$subnet_choice" =~ ^[0-9]+$ ]] && [ "$subnet_choice" -ge 1 ] && [ "$subnet_choice" -lt "$counter" ]; then
            SELECTED_SUBNET="${SUBNET_IDS[$subnet_choice]}"
            echo "Subnet selecionada: ${SUBNET_INFO[$subnet_choice]}"
            break
        else
            echo "Sele√ß√£o inv√°lida. Digite um n√∫mero entre 1 e $((counter-1))."
        fi
    done
    
    echo
    
    # 3. Coletar informa√ß√µes adicionais para a inst√¢ncia
    echo "üìù Configura√ß√µes da inst√¢ncia:"
    echo
    
    # Tipo de inst√¢ncia
    read -p "Tipo de inst√¢ncia (padr√£o: t2.micro): " INSTANCE_TYPE
    INSTANCE_TYPE=${INSTANCE_TYPE:-t2.micro}
    
    # AMI ID (Amazon Linux 2 por padr√£o)
    read -p "AMI ID (padr√£o: ami-0c02fb55956c7d316 - Amazon Linux 2): " AMI_ID
    AMI_ID=${AMI_ID:-ami-0c02fb55956c7d316}
    
    # Nome da inst√¢ncia
    read -p "Nome da inst√¢ncia: " INSTANCE_NAME
    
    # Key pair
    read -p "Nome do key pair (deixe vazio se n√£o quiser usar): " KEY_PAIR
    
    # Security Group
    read -p "Security Group ID (deixe vazio para usar o padr√£o da VPC): " SECURITY_GROUP
    
    echo
    echo "üöÄ Criando inst√¢ncia EC2..."
    echo "=========================="
    echo "VPC: $SELECTED_VPC"
    echo "Subnet: $SELECTED_SUBNET"
    echo "Tipo: $INSTANCE_TYPE"
    echo "AMI: $AMI_ID"
    echo "Nome: $INSTANCE_NAME"
    echo
    
    # Construir comando AWS CLI
    AWS_CMD="aws ec2 run-instances --region $REGION --image-id $AMI_ID --count 1 --instance-type $INSTANCE_TYPE --subnet-id $SELECTED_SUBNET"
    
    # Adicionar key pair se fornecido
    if [ -n "$KEY_PAIR" ]; then
        AWS_CMD="$AWS_CMD --key-name $KEY_PAIR"
    fi
    
    # Adicionar security group se fornecido
    if [ -n "$SECURITY_GROUP" ]; then
        AWS_CMD="$AWS_CMD --security-group-ids $SECURITY_GROUP"
    fi
    
    # Adicionar tag de nome se fornecido
    if [ -n "$INSTANCE_NAME" ]; then
        AWS_CMD="$AWS_CMD --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=$INSTANCE_NAME}]'"
    fi
    
    # Executar comando
    echo "Executando: $AWS_CMD"
    echo
    
    RESULT=$(eval $AWS_CMD 2>&1)
    
    if [ $? -eq 0 ]; then
        INSTANCE_ID=$(echo "$RESULT" | grep -o '"InstanceId": "[^"]*"' | cut -d'"' -f4)
        echo "‚úÖ Inst√¢ncia criada com sucesso!"
        echo "Instance ID: $INSTANCE_ID"
        echo
        echo "Para verificar o status da inst√¢ncia:"
        echo "aws ec2 describe-instances --region $REGION --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].State.Name' --output text"
    else
        echo "‚ùå Erro ao criar inst√¢ncia:"
        echo "$RESULT"
        return 1
    fi
}

# Fun√ß√£o de ajuda
show_help() {
    echo "Script para cria√ß√£o de inst√¢ncia EC2"
    echo "===================================="
    echo
    echo "Uso:"
    echo "  source create_ec2_instance.sh"
    echo "  create_ec2_instance"
    echo
    echo "Ou execute diretamente:"
    echo "  ./create_ec2_instance.sh"
    echo
    echo "O script ir√°:"
    echo "1. Listar todas as VPCs dispon√≠veis"
    echo "2. Permitir sele√ß√£o da VPC desejada"
    echo "3. Listar subnets da VPC selecionada"
    echo "4. Permitir sele√ß√£o da subnet desejada"
    echo "5. Coletar configura√ß√µes da inst√¢ncia"
    echo "6. Criar a inst√¢ncia EC2"
}

# Se o script for executado diretamente (n√£o sourced)
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    if [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]]; then
        show_help
    else
        create_ec2_instance
    fi
fi
